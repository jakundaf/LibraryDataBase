-- Dodawanie tabeli CZYTELNICY - przechowuje informację o zarejestrowanych czytelnikach, monitoruje ich liczę wypożyczeń
-- Sprawdzenie poprawności formatu adresu email
CREATE TABLE CZYTELNICY (
    CZYTELNIK_ID NUMBER,
    IMIE VARCHAR2(50) NOT NULL,
    NAZWISKO VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(100),
    DATA_REJESTRACJI DATE DEFAULT SYSDATE,
    ILOSC_WYPOZYCZEN NUMBER DEFAULT 0,
    CHECK (EMAIL LIKE '%_@__%.__%'),
    CONSTRAINT PK_CZYTELNIK_ID PRIMARY KEY (CZYTELNIK_ID)
);

-- Dodawanie tabeli AUTORZY - przechowuje informację o autorach zarejestrowanych książęk
-- Generowanie virutalnego pola aby uniknąc dubli w przypadku autorów
CREATE TABLE AUTORZY (
    AUTOR_ID NUMBER,
    IMIE VARCHAR2(50) NOT NULL,
    NAZWISKO VARCHAR2(50) NOT NULL,
    UNIKALNY_AUTOR VARCHAR2(102) GENERATED ALWAYS AS (IMIE || ' ' || NAZWISKO) VIRTUAL UNIQUE,
    CONSTRAINT PK_AUTOR_ID PRIMARY KEY (AUTOR_ID)
);

-- Dodawanie tabeli KATEGORIE - przechowuje kategorie które przypisywane są poszczególnym książkom
CREATE TABLE KATEGORIE (
    KATEGORIA_ID NUMBER,
    NAZWA VARCHAR2(50) UNIQUE,
    CONSTRAINT PK_KATEGORIA_ID PRIMARY KEY (KATEGORIA_ID)
);

-- Dodawanie tabeli KSIAZKI - przechowuje książki które figurują w bibliotece, sprawdza ich dostępność, przechwouje wszelkie informację
-- Sprawdza czy rok wydania książki nie jest wcześniejszy niż 1900, jeśli jest, wyrzuca komunikat
CREATE TABLE KSIAZKI (
    KSIAZKA_ID NUMBER,
    TYTUL VARCHAR2(100) NOT NULL,
    AUTOR_ID NUMBER NOT NULL,
    ROK_WYDANIA NUMBER(4),
    ISBN VARCHAR2(20) UNIQUE,
    DOSTEPNOSC CHAR(1) DEFAULT 'T' CHECK (DOSTEPNOSC IN ('T', 'N')),
    ILOSC_WYPOZYCZEN NUMBER DEFAULT 0,
    KATEGORIA_ID NUMBER,
    NAZWA_KATEGORII VARCHAR2(50),
    CONSTRAINT PK_KSIAZKA_ID PRIMARY KEY (KSIAZKA_ID),
    CONSTRAINT FK_AUTOR_ID FOREIGN KEY (AUTOR_ID) REFERENCES AUTORZY(AUTOR_ID),
    CONSTRAINT FK_KATEGORIA_ID FOREIGN KEY (KATEGORIA_ID) REFERENCES KATEGORIE(KATEGORIA_ID),
    CONSTRAINT CHK_ROK_WYDANIA CHECK (ROK_WYDANIA >= 1900)
);

-- Dodawanie tabeli WYPOZYCZENIA - przechowuje informacje na temat wypozyczen, dane osoby która wypożyczyła oraz książkę którą wypożyczyła
-- Wyświetla date zwrotu która wynosi 14 dni od daty wypożyczenia, zlicza karę która wynosi 1,50zł za każdy dzień spóźnienia po dniu z daty zwrotu
CREATE TABLE WYPOZYCZENIA (
    WYPOZYCZENIE_ID NUMBER,
    CZYTELNIK_ID NUMBER NOT NULL,
    IMIE_CZYTELNIKA VARCHAR2(50),
    NAZWISKO_CZYTELNIKA VARCHAR2(50),
    KSIAZKA_ID NUMBER NOT NULL,
    TYTUL_KSIAZKI VARCHAR2(100),
    DATA_WYPOZYCZENIA DATE DEFAULT SYSDATE,
    DATA_ZWROTU DATE,
    KARA NUMBER DEFAULT 0,
    CONSTRAINT PK_WYPOZYCZENIE_ID PRIMARY KEY (WYPOZYCZENIE_ID),
    CONSTRAINT FK_CZYTELNIK_ID FOREIGN KEY (CZYTELNIK_ID) REFERENCES CZYTELNICY(CZYTELNIK_ID),
    CONSTRAINT FK_KSIAZKA_ID FOREIGN KEY (KSIAZKA_ID) REFERENCES KSIAZKI(KSIAZKA_ID),
    CONSTRAINT CHK_DATA_ZWROTU CHECK (DATA_ZWROTU IS NULL OR DATA_ZWROTU >= DATA_WYPOZYCZENIA)
);

-- Dodawanie tabelu KSIAZKI_KATEGORIE - przechowuje informacje o tym, która książka ma jaką kategorię 
CREATE TABLE KSIAZKI_KATEGORIE (
    KSIAZKA_ID NUMBER,
    KATEGORIA_ID NUMBER,
    TYTUL_KSIAZKI VARCHAR2(100),
    NAZWA_KATEGORII VARCHAR2(50),
    CONSTRAINT PK_KSIAZKI_KATEGORIE PRIMARY KEY (KSIAZKA_ID, KATEGORIA_ID),
    CONSTRAINT FK_KSIAZKI_KATEGORIE_KSIAZKA_ID FOREIGN KEY (KSIAZKA_ID) REFERENCES KSIAZKI(KSIAZKA_ID),
    CONSTRAINT FK_KSIAZKI_KATEGORIE_KATEGORIA_ID FOREIGN KEY (KATEGORIA_ID) REFERENCES KATEGORIE(KATEGORIA_ID)
);

-- Tworzenie indeksów
CREATE INDEX IDX_CZYTELNICY_NAZWISKO ON CZYTELNICY(NAZWISKO);
CREATE INDEX IDX_KSIAZKI_TYTUL ON KSIAZKI(TYTUL);
CREATE INDEX IDX_WYPOZYCZENIA_DATA_WYPOZYCZENIA ON WYPOZYCZENIA(DATA_WYPOZYCZENIA);

-- Tworzenie wyzwalacza dla tabeli KSIAZKI sprawdzającego rok wydania
CREATE OR REPLACE TRIGGER TRG_ROK_WYDANIA_CHECK
BEFORE INSERT OR UPDATE ON KSIAZKI
FOR EACH ROW
BEGIN
    IF :NEW.ROK_WYDANIA < 1900 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Rok wydania nie moze byc mniejszy niz 1900');
    END IF;
END;
/

-- Tworzenie wyzwalacza audytowego dla tabeli WYPOZYCZENIA
CREATE OR REPLACE TRIGGER TRG_WYPOZYCZENIA_AUDIT
AFTER INSERT OR UPDATE OR DELETE ON WYPOZYCZENIA
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('Dodano nowe wypozyczenie: ' || :NEW.WYPOZYCZENIE_ID);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('Zaktualizowano wypozyczenie: ' || :NEW.WYPOZYCZENIE_ID);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('Usunieto wypozyczenie: ' || :OLD.WYPOZYCZENIE_ID);
    END IF;
END;
/

-- Tworzenie wyzwalacza do aktualizacji ilosci wypozyczen czytelnika
CREATE OR REPLACE TRIGGER TRG_UPDATE_ILOSC_WYPOZYCZEN_INSERT
AFTER INSERT ON WYPOZYCZENIA
FOR EACH ROW
BEGIN
    UPDATE CZYTELNICY
    SET ILOSC_WYPOZYCZEN = ILOSC_WYPOZYCZEN + 1
    WHERE CZYTELNIK_ID = :NEW.CZYTELNIK_ID;
END;
/

-- Tworzenie wyzwalacza do naliczania kar
CREATE OR REPLACE TRIGGER TRG_CALCULATE_KARA
BEFORE INSERT OR UPDATE ON WYPOZYCZENIA
FOR EACH ROW
BEGIN
    IF :NEW.DATA_ZWROTU IS NOT NULL THEN
        IF :NEW.DATA_ZWROTU > :NEW.DATA_WYPOZYCZENIA + 14 THEN
            :NEW.KARA := (TRUNC(:NEW.DATA_ZWROTU) - TRUNC(:NEW.DATA_WYPOZYCZENIA) - 14) * 1.50;
        ELSE
            :NEW.KARA := 0;
        END IF;
    END IF;
END;
/

-- Tworzenie wyzwalaczy do aktualizacji dostepnosci ksiazek
CREATE OR REPLACE TRIGGER TRG_UPDATE_DOSTEPNOSC_INSERT
BEFORE INSERT ON WYPOZYCZENIA
FOR EACH ROW
DECLARE
    ksiazka_dostepnosc CHAR(1);
    tytul_ksiazki VARCHAR2(100);
    imie_czytelnika VARCHAR2(50);
    nazwisko_czytelnika VARCHAR2(50);
BEGIN
    SELECT DOSTEPNOSC, TYTUL INTO ksiazka_dostepnosc, tytul_ksiazki FROM KSIAZKI WHERE KSIAZKA_ID = :NEW.KSIAZKA_ID;
    IF ksiazka_dostepnosc = 'N' THEN
        RAISE_APPLICATION_ERROR(-20002, 'Ksiazka jest niedostepna do wypozyczenia');
    END IF;

    UPDATE KSIAZKI
    SET DOSTEPNOSC = 'N'
    WHERE KSIAZKA_ID = :NEW.KSIAZKA_ID;

    SELECT IMIE, NAZWISKO INTO imie_czytelnika, nazwisko_czytelnika FROM CZYTELNICY WHERE CZYTELNIK_ID = :NEW.CZYTELNIK_ID;

    -- Aktualizacja kolumny TYTUL_KSIAZKI w tabeli WYPOZYCZENIA
    :NEW.TYTUL_KSIAZKI := tytul_ksiazki;

    -- Aktualizacja kolumny IMIE_CZYTELNIKA i NAZWISKO_CZYTELNIKA w tabeli WYPOZYCZENIA
    :NEW.IMIE_CZYTELNIKA := imie_czytelnika;
    :NEW.NAZWISKO_CZYTELNIKA := nazwisko_czytelnika;

    -- Ustawienie domyślnej daty zwrotu na 14 dni od daty wypożyczenia
    :NEW.DATA_ZWROTU := :NEW.DATA_WYPOZYCZENIA + 14;
END;
/

CREATE OR REPLACE TRIGGER TRG_UPDATE_DOSTEPNOSC_UPDATE
AFTER UPDATE ON WYPOZYCZENIA
FOR EACH ROW
BEGIN
    IF :NEW.DATA_ZWROTU IS NOT NULL THEN
        UPDATE KSIAZKI
        SET DOSTEPNOSC = 'T'
        WHERE KSIAZKA_ID = :NEW.KSIAZKA_ID;
    END IF;
END;
/

-- Tworzenie wyzwalacza do zliczania ilosci wypozyczen ksiazki
CREATE OR REPLACE TRIGGER TRG_UPDATE_ILOSC_WYPOZYCZEN_KSIAZKI
AFTER INSERT ON WYPOZYCZENIA
FOR EACH ROW
BEGIN
    UPDATE KSIAZKI
    SET ILOSC_WYPOZYCZEN = ILOSC_WYPOZYCZEN + 1
    WHERE KSIAZKA_ID = :NEW.KSIAZKA_ID;
END;
/
